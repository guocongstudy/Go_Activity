数据库操作：
1.需要先安装mariadb数据库，这个数据库和mysql基本一样，
库：
  查看所有库：
  show databases;
  创建库
  create database 库名 default charset utf8mb4;
  查看详情
  drop database 库名;
  删除库
  drop database 库名;
  使用库
  use 库名;
表：
  查看所有表
  show tables;
  创建表
  create table 表名(
  列名 列的类型 [列的修饰]
  )engine=innodb default charset utf8mb4;
  查看详情

  库名，表名，列名，小写英文字母，
  分表分库：log_数字/日期

  用户有哪些信息：
  id 整数 int, =>int32,bigint =>int64
  name
  password
  sex
  birthday
  addr
  tel

  create table user(
      id bigint,
      name varchar(32),
      password varchar(1024),
      sex boolean,
      birthday datetime,
      addr text,
      tel varchar(32)
  )engine=innodb default charset utf8mb4;
  删除表
  查看详情
    desc 表名；
    show create table 表名
  删除表
    drop table 表名；

  数据类型：
      数值类型
         布尔类型  boolean
         整形
             tinyint 1
           *  int 4
             mediumint 6
           *  bigint 8
         浮点型
            * float 4
             double  8
            * decimal(m,d) 16 m:有效位数  小数点之前和小数点之后的数字最大值
                             d：小数点后最大位数
      字符类型
          char
         * varchar
         * text 65535 tinytext 255 mediumtext longtext
          blob
          json =>关系型数据库支持文档格式
          enum
      日期类型
         date  年月日
         time  日分秒
         * datetime 年月日时分秒
         timestamp 年月日时分秒
             更新会自动更新为当前时间

      修饰
          主键： PRIMARY KEY
          主键自动增长：int/bigint AUTO_INCREMENT
          唯一： UNIQUE KEY
          非NULL:NOT NULL
              默认值：DEFAULT value
                    DEFAULT 0
                    DEFAULT ''
          注释：COMMENT '',
          None ''

     索引
        针对查询字段，不会这对枚举类型创建
            用户status int 1:未激活，2:正常使用 3:锁定 4:

        create unique index 唯一的索引名称[using 索引类型](创建的列)
        create index 索引名称 using 索引类型 （创建的列）
        联合索引:
        hash * btree rtree

        create index idx_name on user(name);
        create index idx_birthday on user(birthday);
        create index idx_addr on user(addr);
        create index idx_tel on user(tel);

     删除索引
     drop index 索引名称 on 表名；

     DQL
     select * from 表名；
     select into 表名 WHERE  条件；
          条件：列名 基准对象 比较
              比较：
                  关系运算
                      >< =!= >= <=
                  布尔运算
                      and or not
                  like
                      以某个字符串开头  like 'substr%'
                      以某个字符串结尾  like '%substr'
                      包含某个字符串    like '%substr%'
                  like binary
                      name kk, AK
                  in (v1,v2,vn)列表
                  between start and end

                  [not] in (v1,v2,vn) 列表
                  [not] between start and end
                  允许为NULL 值为null的所有行记录
                  is null
                  is not null

                  addr 西安 或者北京，或者上海的
                  addr = 西安 or addr =北京 or addr = 上海
                  []string{"西安","上海","北京"}
                  in_slice(addr,slice)

                  查找birthday =='2002'出生的人？
                     birthday >='2002-01-01 00:00:00'and birthday <'2003-01-01 00:00:00'
                  字符串类型
                      关系运算
                      包含内容 like
                  数值类型
                      关系运算
                  时间类型
                      关系运算
                  bool类型
     DML
     添加：
        insert into 表名(列名) value(值);
        insert into 表名 values(值); //所有列都添加数据

        NOT NULL 但是为设置DEFAULT

     添加：
        update 表名
        update user set password='12345',sex=false;(这个会将所有都更新)

        update 表名
        SET 列名=值，列名=值
        [WHERE 条件];


        SET 列名=值,
     删除：
        delete from 表名 [WHERE 条件]
        truncate table 表名；//删除数据 DDL

        
     在表中插入多条数据：
     insert into user(name,password,birthday,addr) value
     ('aa','122','1997-8-24 13:32:22','西安'),
     ('aa','122','1997-8-24 13:32:22','西安'),
     ('aa','122','1997-8-24 13:32:22','西安'),
     ('aa','122','1997-8-24 13:32:22','西安'),
     ('aa','122','1997-8-24 13:32:22','西安'),
     ('aa','122','1997-8-24 13:32:22','西安'),
     ('aa','122','1997-8-24 13:32:22','西安');

     查表中以什么开头或者结尾的指定数据：
     select * from user where tel like '%1';//以1结尾的
     select * from user where tel like '%1%'//包含1的

     select * from user where birthday < '2021-02-02 12:00:00' and name like '%kk%'

     按条件搜索：
     select * from user where addr in ( '汉中');
     select * from user where addr like '%\%%' (模糊查询带%的字段，\需要转译)

     按条件删除：
     delete from user where name = '';

     查询数据的前三条：
     select * from user limit 3; (查询数据的前三条)
     查询数据的前三条且偏移3条：
     select * from user limit 3 offset 3 ;
     限制查询：
     限制查询结果条数 limit N offset M;
     分页：
        pageSize 每页显示数量
        pageNum 显示第几页1,2,3...
        limit pageSize offset pageNum

     select * from 表名 where 条件 limit N offset M;


        limit pageSize offset pageSize * (pageNum-1)
        select * from 表名 where 条件 limit N offset M;

     排序：
      select * from user order by birthday asc;(asc 指的是升序)
      select * from user order by birthday desc, name desc ;(desc 是降序)，多列排序

      where 条件 order by limit N offset M;(有条件，有排序，有分页)
      select name,password from user order by birthday;
      select password from user order by birthday;(将password这一列提出来，按照顺序)

     聚合查询：
            select count(*) from 表名 where 条件;
            group by
            select 结果中只能由聚合类的列，以及聚合类函数计算结果
      统计每个addr出现次数：
      select addr ,count(*) from user group by addr;(count(*)计算数量)
      sum(column)计算总和，计算那一列
      avg(column)计算平均数
      max(column)计算最大数
      min(column)计算最小数

      select min(birthday) from user;(计算出生日期最小的)
      select min(birthday),max(birthday),avg(birthday) from user;(大，小，平均 一起查)

     按照多列去聚合
     select addr,sex,count(*) from user group by addr,sex;

     多表：
        join 多个表之间存在关联关系
        password shadow
        分表：
            每个月一张表
            集合 交集，并集，差集
            union

            accesslog_01
            accesslog_02
            accesslog_03

            create table password(
                id bigint ,
                name varchar(32)
            );
            insert into password values(1,"root"),(2,"guocong");
            create table shadow(
            id bigint,
            password varchar(32)
            );
            insert into shadow values(1,"123")

        //两个表联合查询
        select * from password join shadow on password.id =shadow.id;
        //将两个表联合起来看
        select * from password union select * from shadow;
        //选取两个表所有出现的id进行展示（集合之间的并集）
        select id from password union select id from shadow;

       子查询
          password,shadow
          所有在password 存在的用户密码信息
          select * from shadow where id in (select * from password)

       别名：
          表别名
             select password.id,password.name,shadow.password
             from password as join shadow as  s on p.id =s.id
          列别名

          函数
            trim
            length
            upper
            lower
            date_format(time,'%Y-%m-%d %H:%i:%s')

       GO操作MYSQL
         database/sql =>定义对数据库操作接口，为实现针对数据库操作功能
                      =>需要使用第三方包（驱动）

         github.com/go-sql-driver/mysql

         操作：
             查询
                DQL Query
             修改
                DDL,DCL,DML
                Exec

         1.使用驱动
            a.选择驱动
            b.初始化导入驱动
         2.打开数据库(连接池)
         3.操作：
            a.修改
              Exec
            b.查询
              Query
              for + Rows.Next Rows.Scan
         4.关闭资源
            a.查询
            Rows.Close()
         5.进程退出
            关闭数据库(连接池)

         ORM：
            gorm 2.0
            beego orm
            sqlx
